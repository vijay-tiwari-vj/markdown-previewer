{"version":3,"sources":["contexts/MarkedContext.js","components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["MarkedContext","createContext","MarkedContextProvider","props","useState","markdown","setMarkdown","Provider","value","handleChange","e","target","children","Editor","useContext","id","onChange","Previewer","preview","marked","setOptions","renderer","Renderer","highlight","code","language","hljs","require","validLanguage","getLanguage","gfm","breaks","dangerouslySetInnerHTML","__html","App","className","Tabs","defaultActiveKey","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAEaA,EAAgBC,0BA0CdC,EAxCsB,SAACC,GAAW,IAAD,EACZC,mBAAS,oqBADG,mBACtCC,EADsC,KAC5BC,EAD4B,KAiC9C,OACE,kBAACN,EAAcO,SAAf,CAAwBC,MAAO,CAAEH,WAAUI,aALxB,SAACC,GACpBJ,EAAYI,EAAEC,OAAOH,UAKjBL,EAAMS,WCzBCC,EAXO,WAAO,IAAD,EACSC,qBAAWd,GAAtCK,EADkB,EAClBA,SAAUI,EADQ,EACRA,aAClB,OACE,6BACE,8BAAUM,GAAG,SAASC,SAAWP,EAAeD,MAAQH,M,iBCiB/CY,EApBU,WAAO,IACtBZ,EAAaS,qBAAWd,GAAxBK,SACFa,EAAUC,IAAOd,GAWvB,OAVAc,IAAOC,WAAW,CAChBC,SAAU,IAAIF,IAAOG,SACrBC,UAAW,SAASC,EAAMC,GACxB,IAAMC,EAAOC,EAAQ,IACfC,EAAgBF,EAAKG,YAAYJ,GAAYA,EAAW,YAC9D,OAAOC,EAAKH,UAAUK,EAAeJ,GAAMhB,OAE7CsB,KAAK,EACLC,QAAQ,IAGR,yBAAKhB,GAAG,UAAUiB,wBAAyB,CAAEC,OAAQf,MCO1CgB,MAjBf,WACE,OACE,yBAAKC,UAAU,gBACb,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,iBAAiB,WAAWtB,GAAG,QACnC,kBAACuB,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YAC7B,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,kBAAC,EAAD,WCLQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.66dea000.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\n\r\nexport const MarkedContext = createContext()\r\n\r\nexport const MarkedContextProvider = (props) => {\r\n  const [ markdown, setMarkdown ] = useState(\r\n`# Markdown Previewer\r\n\r\n## Feel free to edit this template and see how it renders!\r\n### If you're new to Markdown, refer to these examples:\r\n\r\n1. Here's a code block wrapped around a \\`<div></div>\\` element.\r\n\\`\\`\\`\r\n  function sayHello(name) {\r\n    return 'Hello \\`name\\`'\r\n  }\r\n\\`\\`\\`\r\n\r\n2. Make your text **bold**, _italic_, or **_both_**!\r\n3. Or simply ~~strike-through~~.\r\n\r\n4. Want to refer somewhere? Use [links](https://google.com).\r\n5. Love quotes? Use\r\n> Block Quotes!\r\n6. Here's a list that you may find helpful:\r\n- Item 1\r\n- Item 2\r\n\r\n7. Images? Of course you can use them!\\n\r\n![Markdown Logo](https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg)\r\n    `\r\n  )\r\n\r\n  const handleChange = (e) => {\r\n    setMarkdown(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <MarkedContext.Provider value={{ markdown, handleChange }}>\r\n      { props.children }\r\n    </MarkedContext.Provider>\r\n  )\r\n}\r\n\r\nexport default MarkedContextProvider\r\n","import React, { useContext } from 'react'\r\nimport { MarkedContext } from '../contexts/MarkedContext'\r\n\r\nexport const Editor = () => {\r\n  const { markdown, handleChange } = useContext(MarkedContext)\r\n  return (\r\n    <div>\r\n      <textarea id=\"editor\" onChange={ handleChange } value={ markdown }>\r\n\r\n      </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","import React, { useContext } from 'react'\r\nimport marked from 'marked'\r\nimport { MarkedContext } from '../contexts/MarkedContext'\r\n\r\nexport const Previewer = () => {\r\n  const { markdown } = useContext(MarkedContext)\r\n  const preview = marked(markdown)\r\n  marked.setOptions({\r\n    renderer: new marked.Renderer(),\r\n    highlight: function(code, language) {\r\n      const hljs = require('highlight.js');\r\n      const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\r\n      return hljs.highlight(validLanguage, code).value;\r\n    },\r\n    gfm: true,\r\n    breaks: true,\r\n  });\r\n  return (\r\n    <div id=\"preview\" dangerouslySetInnerHTML={{ __html: preview }}>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previewer\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\nimport MarkedContextProvider from './contexts/MarkedContext';\nimport Editor from './components/Editor'\nimport Previewer from './components/Previewer';\n\nfunction App() {\n  return (\n    <div className=\"md-previewer\">\n      <MarkedContextProvider>\n        <Tabs defaultActiveKey=\"markdown\" id=\"tabs\">\n          <Tab eventKey=\"markdown\" title=\"Markdown\">\n            <Editor />\n          </Tab>\n          <Tab eventKey=\"preview\" title=\"Preview\">\n            <Previewer />\n          </Tab>\n        </Tabs>\n      </MarkedContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}